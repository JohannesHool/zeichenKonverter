{"version":3,"sources":["index.js"],"names":["emoji","require","options","i","unicode","length","tmpDict","getName","color","push","EmojiFactory","props","translateTextHandler","event","setState","translateText","target","value","emojiSelectHandler","selectedEmoji","utfConvertHandler","arr","split","utfCode","state","result","this","href","title","className","codePointAt","toString","parseInt","padStart","output","String","fromCodePoint","console","log","type","style","width","onChange","showStr2utf8","showStr2dec","showStr2bin","search","placeholder","showSelectedEmoji","showUTFConversion","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b0344c82.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SelectSearch from 'react-select-search';\n\nconst emoji = require(\"emoji-dictionary\");\n\nlet options = [];\n\nfor (let i = 0; i < emoji.unicode.length; i++) {\n  let tmpDict = {}\n  tmpDict[\"name\"] = emoji.unicode[i] + \" - \" + emoji.getName(emoji.unicode[i]);\n  tmpDict[\"value\"] = emoji.unicode[i];\n  tmpDict[\"style\"] = { color: 'red' }\n  if (emoji.unicode[i].length < 3) {\n    options.push(tmpDict);\n  }\n}\n\nfunction hex2emoji(emojis) {\n  let code = ''\n  for (let i = 0; i < emojis; i++) {\n    code = code + String.fromCodePoint(\"0x\" + emojis[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n  }\n  return code;\n}\n\nclass EmojiFactory extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateText: '',\n      selectedEmoji: '',\n      utfCode: []\n    };\n  }\n\n  translateTextHandler = (event) => {\n    this.setState({ translateText: event.target.value });\n  }\n\n  showStr2hex() {\n\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{this.state.translateText[i].codePointAt(0).toString(16)}</span>);\n    }\n    return result;\n  }\n\n  showStr2dec() {\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16)}</span>);\n    }\n    return result;\n  }\n\n  showStr2bin() {\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(2).padStart(8, '0')}</span>);\n    }\n    return result;\n  }\n\n  showStr2utf8() {\n\n    let arr = this.state.translateText.split(/.*?/u)\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n      result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n    }\n    return result;\n  }\n\n  emojiSelectHandler = (event) => {\n    this.setState({ selectedEmoji: event });\n  }\n\n  showSelectedEmoji() {\n    if (this.state.selectedEmoji.length > 0) {\n\n      return (\n        <div>\n          <span className=\"emoji-span\">{this.state.selectedEmoji}</span>\n        </div>\n      );\n    } else {\n      return;\n    }\n\n\n  }\n\n  utfConvertHandler = (event) => {\n    let arr = event.target.value.split(/.*?/u);\n    this.setState({ utfCode: arr });\n  }\n\n  showUTFConversion() {\n    let arr = [];\n    for (let i = 0; i < this.state.utfCode.length; i++) {\n      arr.push(this.state.utfCode[i].codePointAt(0).toString(16));\n    }\n\n    if (arr.length > 0) {\n      let output = ''\n      for (let i = 0; i < arr.length - 1; i++) {\n        output += String.fromCodePoint(\"0x\" + arr[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n      }\n      output += String.fromCodePoint(\"0x\" + arr[arr.length - 1]);\n\n      console.log(output);\n\n      return <span className=\"emoji-span\">{output}</span>;\n    } else {\n      return;\n    }\n\n\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>Format-Konverter</h1>\n        <div className=\"side-by-side-container\">\n          <div className=\"container\">\n            <h2>Zu codierende Zeichenabfolge</h2>\n            <textarea type='text' style={{ width: \"300px\" }} onChange={this.translateTextHandler} />\n          </div>\n          <div className=\"container\">\n            <h2>Zeichenabfolge in UTF-8-Format</h2>\n            {this.showStr2utf8()}\n          </div>\n          <div className=\"container\">\n            <h2>Zeichenabfolge im Dezimalsystem</h2>\n            {this.showStr2dec()}\n          </div>\n          {/* <div className=\"container\">\n            <h2>Zeichenabfolge im Hexadezimalsystem</h2>\n            {this.showStr2hex()}\n          </div> */}\n          <div className=\"container\">\n            <h2>Zeichenabfolge im Binärsystem</h2>\n            {this.showStr2bin()}\n          </div>\n        </div>\n        <div className=\"side-by-side-container\">\n          <div>\n            <div className=\"container\">\n              <h2>Emoji Generator</h2>\n              <p>Wähle ein Emoji aus (Textsuche & Dropdown).</p>\n              <SelectSearch options={options} onChange={this.emojiSelectHandler} search=\"true\" placeholder=\"Suche Emoji\" />\n              {this.showSelectedEmoji()}\n            </div>\n            <div>\n\n            </div>\n            <div className=\"container\">\n              <h2>Emoji Aggregator</h2>\n              <p>Verbinded Emojis mit einem ZWJ (<i>Zero With Joiner</i>)</p>\n              <textarea type='text' style={{ width: \"300px\" }} onChange={this.utfConvertHandler} />\n            </div>\n            <div>\n              {this.showUTFConversion()}\n            </div>\n          </div>\n\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// ============================================================\n\nReactDOM.render(\n  <EmojiFactory />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}