{"version":3,"sources":["index.js"],"names":["emoji","require","options","encodingOptions","label","value","decodingOptions","i","unicode","length","tmpDict","getName","color","push","EmojiFactory","props","translateTextHandler","event","setState","translateText","target","encodingHandler","endocingFormat","decodingHandler","decodingFormat","emojiSelectHandler","selectedEmoji","utfConvertHandler","arr","Array","from","utfCode","state","encodingFormat","result","this","href","title","className","codePointAt","toString","parseInt","padStart","output","String","fromCodePoint","type","style","width","onChange","placeholder","showStrCodes","showStrRepresentation","search","showSelectedEmoji","showUTFConversion","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2affa274.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SelectSearch from 'react-select-search';\nimport Select from \"react-dropdown-select\";\n\nconst emoji = require(\"emoji-dictionary\");\nlet options = [];\nconst encodingOptions = [{ label: \"Binär\", value: \"Binär\" }, { label: \"Oktal\", value: \"Oktal\" }, { label: \"Dezimal\", value: \"Dezimal\" }, { label: \"Hexadezimal\", value: \"Hexadezimal\" }];\nconst decodingOptions = [{ label: \"ASCII\", value: \"ASCII\" }, { label: \"Unicode\", value: \"Unicode\" }];\n\nfor (let i = 0; i < emoji.unicode.length; i++) {\n  let tmpDict = {}\n  tmpDict[\"name\"] = emoji.unicode[i] + \" - \" + emoji.getName(emoji.unicode[i]);\n  tmpDict[\"value\"] = emoji.unicode[i];\n  tmpDict[\"style\"] = { color: 'red' }\n\n  options.push(tmpDict);\n}\n\nfunction hex2emoji(emojis) {\n  let code = ''\n  for (let i = 0; i < emojis; i++) {\n    code = code + String.fromCodePoint(\"0x\" + emojis[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n  }\n  return code;\n}\n\n\n\nclass EmojiFactory extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateText: '',\n      selectedEmoji: '',\n      utfCode: [],\n      encodingFormat: encodingOptions[0],\n      decodingFormat: decodingOptions[0]\n    };\n  }\n\n  translateTextHandler = (event) => {\n    this.setState({ translateText: event.target.value });\n  }\n\n  encodingHandler = (event) => {\n    this.setState({ endocingFormat: event[0].label });\n  }\n\n  decodingHandler = (event) => {\n    this.setState({ decodingFormat: event[0].label });\n  }\n\n  showStr2hex() {\n\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{this.state.translateText[i].codePointAt(0).toString(16)}</span>);\n    }\n    return result;\n  }\n\n  showStr2dec() {\n\n  }\n\n  showStrCodes() {\n    let result = [];\n    if (this.state.endocingFormat == \"Binär\") {\n      for (let i = 0; i < this.state.translateText.length; i++) {\n        result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(2).padStart(8, '0')}</span>);\n      }\n      return result;\n    } else if (this.state.endocingFormat == \"Hexadezimal\") {\n      let result = []\n      for (let i = 0; i < this.state.translateText.length; i++) {\n        result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(16)}</span>);\n      }\n      return result;\n    } else if (this.state.endocingFormat == \"Dezimal\") {\n      let result = []\n      for (let i = 0; i < this.state.translateText.length; i++) {\n        result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(10)}</span>);\n      }\n      return result;\n    } else if (this.state.endocingFormat == \"Oktal\") {\n      let result = []\n      for (let i = 0; i < this.state.translateText.length; i++) {\n        result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(8)}</span>);\n      }\n      return result;\n    }\n\n  }\n\n  showStr2utf8() {\n    let arr = Array.from(this.state.translateText);\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n      result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n    }\n    return result;\n  }\n\n  showStrRepresentation() {\n    let arr = Array.from(this.state.translateText);\n\n    if (this.state.decodingFormat == \"ASCII\") {\n      for (let i = 0; i < arr.length; i++) {\n        if (parseInt(arr[i].codePointAt(0).toString(16), 16) > 127) {\n          arr[i] = \"???\";\n        }\n      }\n      let result = []\n      for (let i = 0; i < arr.length; i++) {\n        result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n      }\n      return result;\n    } else if (this.state.decodingFormat == \"Unicode\") {\n      let result = []\n      for (let i = 0; i < arr.length; i++) {\n        result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n      }\n      return result;\n    }\n\n\n  }\n\n  emojiSelectHandler = (event) => {\n    this.setState({ selectedEmoji: event });\n  }\n\n  showSelectedEmoji() {\n    if (this.state.selectedEmoji.length > 0) {\n\n      return (\n        <div>\n          <span className=\"emoji-span\">{this.state.selectedEmoji}</span>\n        </div>\n      );\n    } else {\n      return;\n    }\n\n\n  }\n\n  utfConvertHandler = (event) => {\n    let arr = Array.from(event.target.value);\n    this.setState({ utfCode: arr });\n  }\n\n  showUTFConversion() {\n    let arr = [];\n    for (let i = 0; i < this.state.utfCode.length; i++) {\n      arr.push(this.state.utfCode[i].codePointAt(0).toString(16));\n    }\n\n    if (arr.length > 0) {\n      let output = ''\n      for (let i = 0; i < arr.length - 1; i++) {\n        output += String.fromCodePoint(\"0x\" + arr[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n      }\n      output += String.fromCodePoint(\"0x\" + arr[arr.length - 1]);\n\n      return <span className=\"emoji-span\">{output}</span>;\n    } else {\n      return;\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>Zeichen und deren Kodierung</h1>\n        <div className=\"side-by-side-container\">\n          <div className=\"container\">\n            <h2>Zu codierende Zeichenabfolge</h2>\n            <textarea type='text' style={{ width: \"300px\" }} onChange={this.translateTextHandler} />\n          </div>\n          <div className=\"container\">\n            <h2>Kodierung der Zeichen (UTF-8)</h2>\n            <Select className=\"select-input\" options={encodingOptions} onChange={this.encodingHandler} placeholder=\"Wähle Zahlensystem\" />\n            {this.showStrCodes()}\n          </div>\n          <div className=\"container\">\n            <h2>Darstellung der Kodierten Zeichen</h2>\n            <Select className=\"select-input\" options={decodingOptions} onChange={this.decodingHandler} placeholder=\"Wähle Zeichensatz\" />\n            {this.showStrRepresentation()}\n          </div>\n\n        </div>\n        <div className=\"side-by-side-container\">\n          <div>\n            <div className=\"container\">\n              <h2>Emoji Generator</h2>\n              <p>Wähle ein Emoji aus (Textsuche & Dropdown).</p>\n              <SelectSearch options={options} onChange={this.emojiSelectHandler} search=\"true\" placeholder=\"Suche Emoji\" />\n              {this.showSelectedEmoji()}\n            </div>\n            <div>\n\n            </div>\n            <div className=\"container\">\n              <div>\n                <h2>Emoji Aggregator</h2>\n                <p>Verbinded Emojis mit einem ZWJ (<i>Zero With Joiner</i>)</p>\n                <textarea type='text' style={{ width: \"300px\" }} onChange={this.utfConvertHandler} />\n              </div>\n              <div>\n                {this.showUTFConversion()}\n              </div>\n            </div>\n          </div>\n\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// ============================================================\n\nReactDOM.render(\n  <EmojiFactory />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}