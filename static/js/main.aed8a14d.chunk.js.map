{"version":3,"sources":["index.js"],"names":["emoji","require","options","i","unicode","length","tmpDict","getName","color","EmojiFactory","props","translateTextHandler","event","setState","translateText","target","value","emojiSelectHandler","selectedEmoji","utfConvertHandler","arr","Array","from","utfCode","state","result","this","push","href","title","className","codePointAt","toString","parseInt","padStart","output","String","fromCodePoint","type","style","width","onChange","showStr2ascii","showStr2utf8","showStr2bin","showStr2dec","search","placeholder","showSelectedEmoji","showUTFConversion","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aed8a14d.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SelectSearch from 'react-select-search';\n\nconst emoji = require(\"emoji-dictionary\");\n\nlet options = [];\n\nfor (let i = 0; i < emoji.unicode.length; i++) {\n  let tmpDict = {}\n  tmpDict[\"name\"] = emoji.unicode[i] + \" - \" + emoji.getName(emoji.unicode[i]);\n  tmpDict[\"value\"] = emoji.unicode[i];\n  tmpDict[\"style\"] = { color: 'red' }\n}\n\nfunction hex2emoji(emojis) {\n  let code = ''\n  for (let i = 0; i < emojis; i++) {\n    code = code + String.fromCodePoint(\"0x\" + emojis[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n  }\n  return code;\n}\n\nclass EmojiFactory extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateText: '',\n      selectedEmoji: '',\n      utfCode: []\n    };\n  }\n\n  translateTextHandler = (event) => {\n    this.setState({ translateText: event.target.value });\n  }\n\n  showStr2hex() {\n\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{this.state.translateText[i].codePointAt(0).toString(16)}</span>);\n    }\n    return result;\n  }\n\n  showStr2dec() {\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16)}</span>);\n    }\n    return result;\n  }\n\n  showStr2bin() {\n    let result = []\n    for (let i = 0; i < this.state.translateText.length; i++) {\n      result.push(<span href=\" \" title={this.state.translateText[i]} className=\"word\">{parseInt(this.state.translateText[i].codePointAt(0).toString(16), 16).toString(2).padStart(8, '0')}</span>);\n    }\n    return result;\n  }\n\n  showStr2utf8() {\n    let arr = Array.from(this.state.translateText);\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n      result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n    }\n    return result;\n  }\n\n  showStr2ascii() {\n    let arr = Array.from(this.state.translateText);\n\n    for (let i = 0; i < arr.length; i++) {\n      if (parseInt(arr[i].codePointAt(0).toString(16), 16) > 127) {\n        arr[i] = \"?\";\n      }\n    }\n    let result = []\n    for (let i = 0; i < arr.length; i++) {\n      result.push(<span href=\" \" title={arr[i]} className=\"word\">{arr[i]}</span>);\n    }\n    return result;\n  }\n\n  emojiSelectHandler = (event) => {\n    this.setState({ selectedEmoji: event });\n  }\n\n  showSelectedEmoji() {\n    if (this.state.selectedEmoji.length > 0) {\n\n      return (\n        <div>\n          <span className=\"emoji-span\">{this.state.selectedEmoji}</span>\n        </div>\n      );\n    } else {\n      return;\n    }\n\n\n  }\n\n  utfConvertHandler = (event) => {\n    let arr = Array.from(event.target.value);\n    this.setState({ utfCode: arr });\n  }\n\n  showUTFConversion() {\n    let arr = [];\n    for (let i = 0; i < this.state.utfCode.length; i++) {\n      arr.push(this.state.utfCode[i].codePointAt(0).toString(16));\n    }\n\n    if (arr.length > 0) {\n      let output = ''\n      for (let i = 0; i < arr.length - 1; i++) {\n        output += String.fromCodePoint(\"0x\" + arr[i]) + String.fromCodePoint(\"0x\" + \"200d\");\n      }\n      output += String.fromCodePoint(\"0x\" + arr[arr.length - 1]);\n\n      return <span className=\"emoji-span\">{output}</span>;\n    } else {\n      return;\n    }\n\n\n  }\n\n  render() {\n\n    return (\n      <div>\n        <h1>Format-Konverter</h1>\n        <div className=\"side-by-side-container\">\n          <div className=\"container\">\n            <h2>Zu codierende Zeichenabfolge</h2>\n            <textarea type='text' style={{ width: \"300px\" }} onChange={this.translateTextHandler} />\n          </div>\n          <div className=\"container\">\n            <h2>Darstellung nach der ASCII-Kodierung</h2>\n            {this.showStr2ascii()}\n          </div>\n          <div className=\"container\">\n            <h2>Darstellung nach der UTF-8-Kodierung</h2>\n            {this.showStr2utf8()}\n          </div>\n          <div className=\"container\">\n            <h2>Zeichencodes im Bin채rsystem</h2>\n            <p>Gem채ss der UTF-8 kodierung.</p>\n            {this.showStr2bin()}\n          </div>\n          <div className=\"container\">\n            <h2>Zeichencodes im Dezimalsystem</h2>\n            <p>Gem채ss der UTF-8 kodierung.</p>\n            {this.showStr2dec()}\n          </div>\n        </div>\n        <div className=\"side-by-side-container\">\n          <div>\n            <div className=\"container\">\n              <h2>Emoji Generator</h2>\n              <p>W채hle ein Emoji aus (Textsuche & Dropdown).</p>\n              <SelectSearch options={options} onChange={this.emojiSelectHandler} search=\"true\" placeholder=\"Suche Emoji\" />\n              {this.showSelectedEmoji()}\n            </div>\n            <div>\n\n            </div>\n            <div className=\"container\">\n              <div>\n                <h2>Emoji Aggregator</h2>\n                <p>Verbinded Emojis mit einem ZWJ (<i>Zero With Joiner</i>)</p>\n                <textarea type='text' style={{ width: \"300px\" }} onChange={this.utfConvertHandler} />\n              </div>\n              <div>\n                {this.showUTFConversion()}\n              </div>\n            </div>\n          </div>\n\n\n        </div>\n\n      </div>\n    );\n  }\n}\n\n// ============================================================\n\nReactDOM.render(\n  <EmojiFactory />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}